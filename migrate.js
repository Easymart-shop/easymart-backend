const mongoose = require("mongoose");

// ЁЯФЧ MongoDB URL (ржирж┐ржЬрзЗрж░ .env ржерзЗржХрзЗ ржирж┐ржи)
const MONGO_URI = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/easymart";

// ржкрзБрж░рзЛржирзЛ products schema
const oldProductSchema = new mongoose.Schema({}, { strict: false });
const OldProduct = mongoose.model("Product", oldProductSchema, "products");

// ржирждрзБржи products schema
const newProductSchema = new mongoose.Schema({
  _id: String, // ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ string id рж░рж╛ржЦржм
  name: String,
  price: Number,
  oldPrice: Number,
  description: String,
  image: String,
  extraImgs: [String],
  stock: Number,
  rating: Number,
});
const NewProduct = mongoose.model("ProductNew", newProductSchema, "products_new");

async function migrate() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log("тЬЕ MongoDB connected");

    // рж╕ржм ржкрзБрж░рзЛржирзЛ product ржЖржирзЛ
    const oldProducts = await OldProduct.find({});
    console.log(`ЁЯУж Found ${oldProducts.length} products`);

    for (let prod of oldProducts) {
      // ObjectId ржХрзЗ string ржП рж░рзВржкрж╛ржирзНрждрж░
      const newProd = {
        ...prod.toObject(),
        _id: prod._id.toString(),
      };

      // ржирждрзБржи collection ржП save
      await NewProduct.findByIdAndUpdate(newProd._id, newProd, { upsert: true });
      console.log(`тЮбя╕П Migrated: ${newProd._id} (${newProd.name})`);
    }

    console.log("ЁЯОЙ Migration completed! Data saved in 'products_new' collection.");
    process.exit();
  } catch (err) {
    console.error("тЭМ Migration failed:", err);
    process.exit(1);
  }
}

migrate();
